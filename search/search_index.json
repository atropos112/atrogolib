{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"atrogolib","text":"<p>This is an \"all-in-one\" library package in Go that contains all sorts of utilities, helpers, structs that can be used in variety of places. I am using it extensively in my homelab stuff.</p> <p>Should certain part of atrogolib get sizable enough, it will likely be split into its own package. The aim is to let things grow organically and see what needs splitting rather than split pre-emptively stupid number of repos unnecessarily.</p>"},{"location":"#dependencies","title":"Dependencies","text":"<p>The hope is to use as few dependencies as possible. In particular the following are used now:</p>"},{"location":"#http-web-framework-of-choice-nethttp","title":"Http web framework of choice: net/http","text":"<p>The net/http is fast and powerful, its not as fast as fiber I don't think but fiber comes with bunch of compromises of its own, in particular if you need something so fast that net/http is not enough for you, you should probably roll something specific to that task anyway. net/http is a standard library.</p>"},{"location":"#logging-framework-of-choice-slog","title":"Logging framework of choice: slog","text":"<p>Slog is fantastic logging package that I think is either the fastest or nearly the fastest, its super easy to use, and has a lot of support. Is the be all and end all, maybe not, but I'd rather settle on something rather than have 3 different logging frameworks lying around. Slog is also coming by default as a standard package now which is very nice.</p>"},{"location":"#utilities-package-lo","title":"Utilities package: lo","text":"<p>It comes with crazy number of utilities that I find myself using all the time. It's a bit of a kitchen sink but I like it. If writing a utility function check if its not in lo already. lo/parallel is also supported. This is not a standard library.</p>"},{"location":"Utils/","title":"Utils","text":""},{"location":"Utils/#utils","title":"utils","text":"<pre><code>import \"github.com/atropos112/atrogolib/utils\"\n</code></pre>"},{"location":"Utils/#index","title":"Index","text":"<ul> <li>func ArrContains[T constraints.Ordered](arr []T, obj T) bool</li> <li>func ArrContainsArr[T constraints.Ordered](arr []T, subArr []T) bool</li> <li>func GetCred(value string) (string, error)</li> <li>func GetCredUnsafe(value string) string</li> <li>func MakeAPIRequest(client *http.Client, kind, apiBaseURL, endpoint, token string, request, response interface{}) error</li> <li>func MakeDeleteRequest(client *http.Client, apiBaseURL, endpoint, token string, response any) error</li> <li>func MakeGetRequest(client *http.Client, apiBaseURL, endpoint, token string, response any) error</li> <li>func MakePostRequest(client *http.Client, apiBaseURL, endpoint, token string, request, response any) error</li> <li>func MakePutRequest(client *http.Client, apiBaseURL, endpoint, token string, request, response any) error</li> <li>func RunAPIServer(port int) error</li> <li>type APIError</li> <li>func (e *APIError) Error() string</li> <li>type AuthenticatedAPIClient</li> <li>func NewAPIClient(baseURL, token string) AuthenticatedAPIClient</li> <li>func (c *AuthenticatedAPIClient) Delete(endpoint string, response interface{}) error</li> <li>func (c *AuthenticatedAPIClient) Get(endpoint string, response interface{}) error</li> <li>func (c *AuthenticatedAPIClient) Post(endpoint string, request, response interface{}) error</li> <li>func (c *AuthenticatedAPIClient) Put(endpoint string, request, response interface{}) error</li> <li>type DeveloperError</li> <li>func (e *DeveloperError) Error() string</li> <li>type GPTDoesntListenError</li> <li>func (e *GPTDoesntListenError) Error() string</li> <li>type NoCredFoundError</li> <li>func (e *NoCredFoundError) Error() string</li> </ul>"},{"location":"Utils/#func-arrcontains","title":"func ArrContains","text":"<pre><code>func ArrContains[T constraints.Ordered](arr []T, obj T) bool\n</code></pre> <p>ArrContains checks if an array contains obj</p> <p></p>"},{"location":"Utils/#func-arrcontainsarr","title":"func ArrContainsArr","text":"<pre><code>func ArrContainsArr[T constraints.Ordered](arr []T, subArr []T) bool\n</code></pre> <p>ArrContainsArr checks if an array contains all elements of another array</p> <p></p>"},{"location":"Utils/#func-getcred","title":"func GetCred","text":"<pre><code>func GetCred(value string) (string, error)\n</code></pre> <p>GetCred is a function that gets a credential from the environment variables. If the credential is not found, it will return an error.</p> <p></p>"},{"location":"Utils/#func-getcredunsafe","title":"func GetCredUnsafe","text":"<pre><code>func GetCredUnsafe(value string) string\n</code></pre> <p>GetCredUnsafe is a function that gets a credential from the environment variables. If the credential is not found, it will log a fatal error.</p> <p></p>"},{"location":"Utils/#func-makeapirequest","title":"func MakeAPIRequest","text":"<pre><code>func MakeAPIRequest(client *http.Client, kind, apiBaseURL, endpoint, token string, request, response interface{}) error\n</code></pre> <p>MakeAPIRequest is a generic function to make an API request. It supports GET, POST, PUT, and DELETE requests.</p> <p></p>"},{"location":"Utils/#func-makedeleterequest","title":"func MakeDeleteRequest","text":"<pre><code>func MakeDeleteRequest(client *http.Client, apiBaseURL, endpoint, token string, response any) error\n</code></pre> <p>MakeDeleteRequest is a helper function to make a DELETE request to the specified endpoint. If token is not \"\" it will be added to the request as a Bearer token.</p> <p></p>"},{"location":"Utils/#func-makegetrequest","title":"func MakeGetRequest","text":"<pre><code>func MakeGetRequest(client *http.Client, apiBaseURL, endpoint, token string, response any) error\n</code></pre> <p>MakeGetRequest is a helper function to make a GET request to the specified endpoint. If token is not \"\" it will be added to the request as a Bearer token.</p> <p></p>"},{"location":"Utils/#func-makepostrequest","title":"func MakePostRequest","text":"<pre><code>func MakePostRequest(client *http.Client, apiBaseURL, endpoint, token string, request, response any) error\n</code></pre> <p>MakePostRequest is a helper function to make a POST request to the specified endpoint. If token is not \"\" it will be added to the request as a Bearer token.</p> <p></p>"},{"location":"Utils/#func-makeputrequest","title":"func MakePutRequest","text":"<pre><code>func MakePutRequest(client *http.Client, apiBaseURL, endpoint, token string, request, response any) error\n</code></pre> <p>MakePutRequest is a helper function to make a PUT request to the specified endpoint. If token is not \"\" it will be added to the request as a Bearer token.</p> <p></p>"},{"location":"Utils/#func-runapiserver","title":"func RunAPIServer","text":"<pre><code>func RunAPIServer(port int) error\n</code></pre> <p>RunAPIServer attaches logging middleware to the default http server and starts it on the specified port.</p> <p></p>"},{"location":"Utils/#type-apierror","title":"type APIError","text":"<p>APIError is an error type that is returned when an API request fails.</p> <pre><code>type APIError struct {\n    StatusCode int\n    Message    string\n}\n</code></pre> <p></p>"},{"location":"Utils/#func-apierror-error","title":"func (*APIError) Error","text":"<pre><code>func (e *APIError) Error() string\n</code></pre>"},{"location":"Utils/#type-authenticatedapiclient","title":"type AuthenticatedAPIClient","text":"<p>AuthenticatedAPIClient is a struct that contains the base URL of the API and the token to use for requests.</p> <pre><code>type AuthenticatedAPIClient struct {\n    BaseURL string\n    Token   string\n    Client  *http.Client\n}\n</code></pre> <p></p>"},{"location":"Utils/#func-newapiclient","title":"func NewAPIClient","text":"<pre><code>func NewAPIClient(baseURL, token string) AuthenticatedAPIClient\n</code></pre> <p>NewAPIClient creates a new AuthenticatedAPIClient with the specified base URL and token.</p> <p></p>"},{"location":"Utils/#func-authenticatedapiclient-delete","title":"func (*AuthenticatedAPIClient) Delete","text":"<pre><code>func (c *AuthenticatedAPIClient) Delete(endpoint string, response interface{}) error\n</code></pre> <p>Delete is a helper function to make a DELETE request to the specified endpoint. If token is not \"\" it will be added to the request as a Bearer token.</p> <p></p>"},{"location":"Utils/#func-authenticatedapiclient-get","title":"func (*AuthenticatedAPIClient) Get","text":"<pre><code>func (c *AuthenticatedAPIClient) Get(endpoint string, response interface{}) error\n</code></pre> <p>Get is a helper function to make a GET request to the specified endpoint. If token is not \"\" it will be added to the request as a Bearer token.</p> <p></p>"},{"location":"Utils/#func-authenticatedapiclient-post","title":"func (*AuthenticatedAPIClient) Post","text":"<pre><code>func (c *AuthenticatedAPIClient) Post(endpoint string, request, response interface{}) error\n</code></pre> <p>Post is a helper function to make a POST request to the specified endpoint. If token is not \"\" it will be added to the request as a Bearer token.</p> <p></p>"},{"location":"Utils/#func-authenticatedapiclient-put","title":"func (*AuthenticatedAPIClient) Put","text":"<pre><code>func (c *AuthenticatedAPIClient) Put(endpoint string, request, response interface{}) error\n</code></pre> <p>Put is a helper function to make a PUT request to the specified endpoint. If token is not \"\" it will be added to the request as a Bearer token.</p> <p></p>"},{"location":"Utils/#type-developererror","title":"type DeveloperError","text":"<p>DeveloperError represents an error that is caused by a developer mistake</p> <pre><code>type DeveloperError struct {\n    Message string\n}\n</code></pre> <p></p>"},{"location":"Utils/#func-developererror-error","title":"func (*DeveloperError) Error","text":"<pre><code>func (e *DeveloperError) Error() string\n</code></pre>"},{"location":"Utils/#type-gptdoesntlistenerror","title":"type GPTDoesntListenError","text":"<p>GPTDoesntListenError represents an error when GPT doesn't listen</p> <pre><code>type GPTDoesntListenError struct {\n    UserMessage string\n    SysMessage  string\n}\n</code></pre> <p></p>"},{"location":"Utils/#func-gptdoesntlistenerror-error","title":"func (*GPTDoesntListenError) Error","text":"<pre><code>func (e *GPTDoesntListenError) Error() string\n</code></pre>"},{"location":"Utils/#type-nocredfounderror","title":"type NoCredFoundError","text":"<p>NoCredFoundError represents an error when no credentials are found</p> <pre><code>type NoCredFoundError struct {\n    CredentialName string\n}\n</code></pre> <p></p>"},{"location":"Utils/#func-nocredfounderror-error","title":"func (*NoCredFoundError) Error","text":"<pre><code>func (e *NoCredFoundError) Error() string\n</code></pre> <p>Generated by gomarkdoc</p>"}]}